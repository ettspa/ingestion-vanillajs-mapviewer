// Define a static class called "Sidenav"
class Sidenav {

    // A static method called "toggleSidenav" that toggles the sidenav by checking its display style
    static toggleSidenav() {
        const div = document.getElementById('sidenav-container');
        if (div.style.display === 'none' || !div.style.display) {
            Sidenav.openSidenav();
        } else {
            Sidenav.closeSidenav();
        };
    }

    // A static method called "openSidenav" that opens the sidenav and dispatches an "openSidenav" event
    static openSidenav() {
        const openSidenavEvent = new CustomEvent('openSidenav');
        document.dispatchEvent(openSidenavEvent);
        const div = document.getElementById('sidenav-container');
        const toggleButton = document.getElementById('toggle-button');
        div.style.display = 'flex';
        toggleButton.classList.remove('button-toggle-sidenav-closed');
        toggleButton.classList.add('button-toggle-sidenav-open');

    }

     // A static method called "closeSidenav" that closes the sidenav and dispatches a "closeSidenav" event
    static closeSidenav() {
        const closeSidenavEvent = new CustomEvent('closeSidenav');
        document.dispatchEvent(closeSidenavEvent);
        const div = document.getElementById('sidenav-container');
        const toggleButton = document.getElementById('toggle-button');
        div.style.display = 'none';
        toggleButton.classList.remove('button-toggle-sidenav-open');
        toggleButton.classList.add('button-toggle-sidenav-closed');
    }

    // A static method called "displayData" that takes in data, dataUrl, 
    // and type, opens the sidenav, creates a card container with the data, and appends it to the data container.
    static displayData(data, dataUrl, type) {
        const div = document.getElementById('data-container');
        Sidenav.openSidenav();
        const cardContainer = document.createElement('div');
        cardContainer.classList.add('card-container');
        cardContainer.innerHTML = Sidenav.createDataHTML(data);
        const button = Sidenav.createPlotButton();
        const finalDataUrl = Sidenav.selectorCreateUrl(dataUrl, data);
        button.addEventListener('click', () => {
            const event = new CustomEvent('plotButtonClicked', { detail: { url: finalDataUrl, type: type } });
            document.dispatchEvent(event);
            const startLoading = new CustomEvent('startLoading');
            document.dispatchEvent(startLoading);
        });
        cardContainer.appendChild(button);
        div.appendChild(cardContainer);
    }

    // A static method called "createDataHTML" that takes in data and returns the HTML string that displays the data in a key-value pair format
    static createDataHTML(data) {
        return Object.keys(data).map(k => `<div class='title'>${k}</div><div class='value'>${data[k]}</div>`).join('');
    }

     // A static method called "createPlotButton" that creates a plot button and returns it
    static createPlotButton() {
        const plotButton = document.createElement('button');
        const textButton = document.createTextNode('Open Plot');
        plotButton.classList.add('sidenav-button');
        plotButton.appendChild(textButton);
        return plotButton;
    }

    // A static method called "clearData" that clears the data container and dispatches both "closeChart" and "closeChartAndSidenav" events
    static clearData() {
        const div = document.getElementById('data-container');
        const closeChartevent = new CustomEvent('closeChart');
        const closeSidenavevent = new CustomEvent('closeChartAndSidenav');
        document.dispatchEvent(closeChartevent);
        document.dispatchEvent(closeSidenavevent);
        div.innerHTML = '';
    }
    
    // This function is a static method that receives two parameters, 'dataUrl' and 'data'. 
    // It determines which method to use to create a data URL based on the presence of the string "(LAT)" in the 'dataUrl' parameter. 
    // If "(LAT)" is present, it calls the 'createDataUrlForWms' method and passes the 'dataUrl' and 'data' parameters as arguments. 
    // Otherwise, it calls the 'createDataUrlForGeoJson' method and passes the 'dataUrl' and 'data' parameters as arguments. 
    // The function returns the final URL generated by the respective method.
    static selectorCreateUrl(dataUrl, data) {
        if (dataUrl.includes('(LAT)')) {
            return Sidenav.createDataUrlForWms(dataUrl, data);
        } else {
            return Sidenav.createDataUrlForGeoJson(dataUrl, data);
        }
    }

    // This function is a static method that receives two parameters, 'dataUrl' and 'data'. 
    // It replaces the "(LAT)" string in the 'dataUrl' parameter with the 'data.latitude' value and replaces the "(LNG)" string with the 'data.longitude' value.
    // It returns the final URL with the replaced values.
    static createDataUrlForWms(dataUrl, data) {
        const replaceLat = dataUrl.replaceAll('LAT', data.latitude);
        const finalUrl = replaceLat.replaceAll('LNG', data.longitude)
        return finalUrl
    }

    // This function is a static method that receives two parameters, 'dataUrl' and 'data'. 
    // It appends a string with some parameters to the 'dataUrl' parameter. 
    // It adds the 'data.platformid' value between double quotes, sets the 'time' parameter to a specific date and time, 
    // sets the 'depth' parameter to 1 and finally, it calls the 'distinct()' method. It returns the final URL with the appended parameters.
    static createDataUrlForGeoJson(dataUrl, data) {
        dataUrl = dataUrl + '"' + data.platformid + '"&time>=2023-01-26T09:10:00Z&depth=1&distinct()';
        return dataUrl
    }
}